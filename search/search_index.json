{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DVS - DuckDB Vector Similarity Search API","text":"<p>A high-performance vector similarity search API powered by DuckDB and OpenAI embeddings.</p> <p>Documentation: https://allen2c.github.io/dvs/</p> <p>Source Code: https://github.com/allen2c/dvs</p>"},{"location":"#overview","title":"Overview","text":"<p>DVS (DuckDB-VSS-API) is a FastAPI-based web service that provides efficient vector similarity search capabilities using DuckDB as the backend database and OpenAI's embedding models for vector representation. This project is designed for applications requiring fast similarity search capabilities, such as recommendation systems, semantic search engines, and content discovery platforms.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Single and bulk vector similarity searches</li> <li>Caching of embeddings for improved performance</li> <li>Support for both text queries and pre-computed vector embeddings</li> <li>Configurable search parameters (e.g., top-k results, embedding inclusion)</li> <li>Integration with OpenAI's latest embedding models</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant FastAPI\n    participant Cache\n    participant OpenAI\n    participant DuckDB\n\n    Client-&gt;&gt;FastAPI: Send search request\n    FastAPI-&gt;&gt;Cache: Check for cached embedding\n    alt Embedding in cache\n        Cache--&gt;&gt;FastAPI: Return cached embedding\n    else Embedding not in cache\n        FastAPI-&gt;&gt;OpenAI: Generate embedding\n        OpenAI--&gt;&gt;FastAPI: Return embedding\n        FastAPI-&gt;&gt;Cache: Store new embedding\n    end\n    FastAPI-&gt;&gt;DuckDB: Perform vector search\n    DuckDB--&gt;&gt;FastAPI: Return search results\n    FastAPI-&gt;&gt;Client: Send search response</code></pre>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install from PyPI:    <pre><code>pip install dvs-py\n</code></pre></li> </ol>"},{"location":"#usage","title":"Usage","text":""},{"location":"#build-database-from-scratch","title":"Build database from scratch","text":"<pre><code>import asyncio\nimport tempfile\n\nfrom rich import print\n\nfrom dvs import DVS\nfrom dvs.types.document import Document\n\ndvs = DVS(tempfile.NamedTemporaryFile(suffix=\".duckdb\").name)\n\n# Add document to the database\ndvs.add(\n    \"\"\"\n    Apple has announced new features for its upcoming iPhone, including an upgraded camera system and a new A16 chip for faster processing. The introduction of \"Focus Mode\" will allow users to customize notifications based on their activities.\n    \"\"\".strip()  # noqa: E501\n)\n# Bulk add documents to the database\ndvs.add(\n    [\n        Document.from_content(\n            name=\"Microsoft Expands Cloud Services with Azure Updates\",\n            content=\"Microsoft has updated its Azure cloud services with enhanced AI and machine learning tools, along with new security features for data protection. These improvements aim to help businesses innovate and scale their operations more effectively.\",  # noqa: E501\n        ),\n        Document.from_content(\n            name=\"Google Introduces New AI Tools for Workspace\",\n            content=\"Google has launched new AI tools for Workspace, including smart compose in Docs and advanced data analysis in Sheets. These features are designed to streamline workflows and enhance productivity for users.\",  # noqa: E501\n        ),\n    ]\n)\nprint(f\"DuckDB database path: {dvs.db_path.resolve()}\")\n\n# Query the database\nresults = asyncio.run(dvs.search(\"What are the new features of the iPhone?\"))\nprint(results)\n# [\n#     (\n#         Point(\n#             point_id=\"pt-8803e5df-c9df-4b01-9ce4-0b96217bf1f6\",\n#             document_id=\"doc-b87f979a-b994-42c3-aa7f-70b76ff97da4\",\n#             content_md5=\"14c88c0886f1ed68629303cf11270885\",\n#             embedding=[],\n#             metadata={},\n#         ),\n#         Document(\n#             document_id=\"doc-b87f979a-b994-42c3-aa7f-70b76ff97da4\",\n#             name=\"Apple has announced new feat\",\n#             content=\"Apple has announced new features for its upcoming iPhone ...\",\n#             content_md5=\"14c88c0886f1ed68629303cf11270885\",\n#             metadata={\"content_length\": 239},\n#             created_at=1733470507,\n#             updated_at=1733470507,\n#         ),\n#         0.6913947463035583,\n#     ),\n#     (\n#         Point(\n#             point_id=\"pt-310b0550-b6c0-49fd-897f-fbc59f28e1f3\",\n#             document_id=\"doc-958469dd-e1c9-4ead-8620-b730ce51220b\",\n#             content_md5=\"79d8a6366ec174987672ec850af072d8\",\n#             embedding=[],\n#             metadata={},\n#         ),\n#         Document(\n#             document_id=\"doc-958469dd-e1c9-4ead-8620-b730ce51220b\",\n#             name=\"Microsoft Expands Cloud Services with Azure Updates\",\n#             content=\"Microsoft has updated its Azure cloud services ...\",\n#             content_md5=\"79d8a6366ec174987672ec850af072d8\",\n#             metadata={},\n#             created_at=None,\n#             updated_at=None,\n#         ),\n#         0.27888885140419006,\n#     ),\n#     (\n#         Point(\n#             point_id=\"pt-b4f5f590-2040-44e1-b79f-26ee05f8a9cc\",\n#             document_id=\"doc-2f43a241-e9e0-46b6-8df2-cc1898a13f14\",\n#             content_md5=\"3a9a118392776e9dbcb4f6feb43dbaf0\",\n#             embedding=[],\n#             metadata={},\n#         ),\n#         Document(\n#             document_id=\"doc-2f43a241-e9e0-46b6-8df2-cc1898a13f14\",\n#             name=\"Google Introduces New AI Tools for Workspace\",\n#             content=\"Google has launched new AI ...\",\n#             content_md5=\"3a9a118392776e9dbcb4f6feb43dbaf0\",\n#             metadata={},\n#             created_at=None,\n#             updated_at=None,\n#         ),\n#         0.22798193991184235,\n#     ),\n# ]\n</code></pre>"},{"location":"#usage-in-api-server","title":"Usage in API Server","text":"<ol> <li> <p>Start the FastAPI server:    <pre><code>DB_PATH=&lt;path/to/duckdb&gt; &amp;&amp; make run-server-dev DB_PATH=$DB_PATH\n</code></pre></p> </li> <li> <p>Access the API documentation:    Open your browser and navigate to <code>http://localhost:8000/docs</code> for the Swagger UI.</p> </li> <li> <p>Make API requests:</p> </li> <li>Single search: <code>POST /search</code> or <code>POST /s</code></li> <li>Bulk search: <code>POST /bulk_search</code> or <code>POST /bs</code></li> </ol> <pre><code>import base64\n\nimport numpy as np\nimport openai\nimport requests\nfrom rich import print\n\n# Query text search\nresponse = requests.post(\n    \"http://localhost:8000/search\",\n    json={\"query\": \"AMD yes!\", \"top_k\": 3},\n)\nprint(response.json())\n# {\n#     'results': [\n#         {\n#             'point': {\n#                 'point_id': 'pt-bac54213-f476-4fb0-9813-24492135ad85',\n#                 'document_id': 'doc-18610658-cf88-4a53-b2ac-7e47e16465a5',\n#                 'content_md5': '1fc96c3d1916da4075947eb136673c16',\n#                 'embedding': [],\n#                 'metadata': {}\n#             },\n#             'document': {\n#                 'document_id': 'doc-18610658-cf88-4a53-b2ac-7e47e16465a5',\n#                 'name': '348.txt',\n#                 'content': 'Game makers get Xbox 2 sneak peek...',\n#                 'content_md5': '1fc96c3d1916da4075947eb136673c16',\n#                 'metadata': {'file': '348.txt', 'content_length': 2589},\n#                 'created_at': 1733371367,\n#                 'updated_at': 1733371367\n#             },\n#             'relevance_score': 0.31964972615242004\n#         },\n#         {\n#             'point': {\n#                 'point_id': 'pt-7bcba958-ce5b-4d0d-b9d4-7b4fe4ec77cd',\n#                 'document_id': 'doc-de784541-a0fa-430b-9376-44bbbec8ccd4',\n#                 'content_md5': '878e78314cc8e162642b3d9028c6e0d2',\n#                 'embedding': [],\n#                 'metadata': {}\n#             },\n#             'document': {\n#                 'document_id': 'doc-de784541-a0fa-430b-9376-44bbbec8ccd4',\n#                 'name': '329.txt',\n#                 'content': 'Intel unveils laser breakthrough...',\n#                 'content_md5': '878e78314cc8e162642b3d9028c6e0d2',\n#                 'metadata': {'file': '329.txt', 'content_length': 2883},\n#                 'created_at': 1733371367,\n#                 'updated_at': 1733371367\n#             },\n#             'relevance_score': 0.3183119297027588\n#         },\n#         {\n#             'point': {\n#                 'point_id': 'pt-a0032c53-362a-4caf-8db7-ed1559450e8f',\n#                 'document_id': 'doc-cc036752-b5e7-4729-85c7-dc09a3f18d34',\n#                 'content_md5': '5bf7dc32f230d0f427faec2ae3aa5b48',\n#                 'embedding': [],\n#                 'metadata': {}\n#             },\n#             'document': {\n#                 'document_id': 'doc-cc036752-b5e7-4729-85c7-dc09a3f18d34',\n#                 'name': '019.txt',\n#                 'content': 'Intel unveils laser breakthrough...',\n#                 'content_md5': '5bf7dc32f230d0f427faec2ae3aa5b48',\n#                 'metadata': {'file': '019.txt', 'content_length': 2875},\n#                 'created_at': 1733371367,\n#                 'updated_at': 1733371367\n#             },\n#             'relevance_score': 0.31670358777046204\n#         }\n#     ]\n# }\n\n\n# Query array search\nvector = (\n    openai.OpenAI()\n    .embeddings.create(\n        input=\"Play Nintendo Switch\", model=\"text-embedding-3-small\", dimensions=512\n    )\n    .data[0]\n    .embedding\n)\nresponse = requests.post(\n    \"http://localhost:8000/search\",\n    json={\"query\": vector},\n)\nprint(response.json())\n\n\n# Query array in base64\nvector = (\n    openai.OpenAI()\n    .embeddings.create(\n        input=\"IBM is a company\", model=\"text-embedding-3-small\", dimensions=512\n    )\n    .data[0]\n    .embedding\n)\nvector_base64 = base64.b64encode(np.array(vector, dtype=np.float32).tobytes()).decode(\n    \"ascii\"\n)\nresponse = requests.post(\n    \"http://localhost:8000/search\",\n    json={\"query\": vector_base64},\n)\nprint(response.json())\n\n# Bulk search\nresponse = requests.post(\n    \"http://localhost:8000/bulk_search\",\n    json={\"queries\": [{\"query\": \"PlayStation 2\"}, {\"query\": \"Xbox 360\"}]},\n)\nprint(response.json())\n# {\"results\": [{\"results\": [...]}, {\"results\": [...]}]}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"}]}