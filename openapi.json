{
  "openapi": "3.1.0",
  "info": {
    "title": "duckdb-vss-api",
    "summary": "A high-performance vector similarity search API powered by DuckDB and OpenAI embeddings",
    "description": "The DuckDB Vector Similarity Search (VSS) API provides a fast and efficient way to perform\nvector similarity searches on large datasets. It leverages DuckDB for data storage and\nquerying, and OpenAI's embedding models for vector representation of text data.\n\nKey Features:\n- Single and bulk vector similarity searches\n- Caching of embeddings for improved performance\n- Support for both text queries and pre-computed vector embeddings\n- Configurable search parameters (e.g., top-k results, embedding inclusion)\n- Integration with OpenAI's latest embedding models\n\nThis API is designed for applications requiring fast similarity search capabilities,\nsuch as recommendation systems, semantic search engines, and content discovery platforms.",
    "contact": {
      "name": "DuckDB VSS API",
      "url": "https://github.com/ChouYuJung/duckdb-vss-api",
      "email": "f1470891079@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Api Root",
        "description": "Root endpoint providing API status and basic information",
        "operationId": "api_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Api Root  Get"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "summary": "Api Search",
        "description": "Perform a vector similarity search on the database",
        "operationId": "api_search_search_post",
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Debug" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest",
                "description": "The search request containing the query and search parameters"
              },
              "examples": {
                "search_request_example_1": {
                  "summary": "Search Request Example 1",
                  "value": {
                    "query": "How is Amazon?",
                    "top_k": 5,
                    "with_embedding": false
                  }
                },
                "search_request_example_2": {
                  "summary": "Search Request Example 2: Base64",
                  "value": { "query": "", "top_k": 5, "with_embedding": false }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/s": {
      "post": {
        "summary": "Api Search",
        "description": "Abbreviation for /search",
        "operationId": "api_search_s_post",
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Debug" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest",
                "description": "The search request containing the query and search parameters"
              },
              "examples": {
                "search_request_example_1": {
                  "summary": "Search Request Example 1",
                  "value": {
                    "query": "How is Amazon?",
                    "top_k": 5,
                    "with_embedding": false
                  }
                },
                "search_request_example_2": {
                  "summary": "Search Request Example 2: Base64",
                  "value": { "query": "", "top_k": 5, "with_embedding": false }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/bulk_search": {
      "post": {
        "summary": "Api Bulk Search",
        "description": "Perform multiple vector similarity searches in a single request",
        "operationId": "api_bulk_search_bulk_search_post",
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Debug" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSearchRequest",
                "description": "The bulk search request containing multiple queries and search parameters"
              },
              "examples": {
                "search_request_example_1": {
                  "summary": "Bulk Search Request Example 1",
                  "value": {
                    "queries": [
                      {
                        "query": "How is Apple doing?",
                        "top_k": 2,
                        "with_embedding": false
                      },
                      {
                        "query": "What is the game score?",
                        "top_k": 2,
                        "with_embedding": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BulkSearchResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/bs": {
      "post": {
        "summary": "Api Bulk Search",
        "description": "Abbreviation for /bulk_search",
        "operationId": "api_bulk_search_bs_post",
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Debug" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSearchRequest",
                "description": "The bulk search request containing multiple queries and search parameters"
              },
              "examples": {
                "search_request_example_1": {
                  "summary": "Bulk Search Request Example 1",
                  "value": {
                    "queries": [
                      {
                        "query": "How is Apple doing?",
                        "top_k": 2,
                        "with_embedding": false
                      },
                      {
                        "query": "What is the game score?",
                        "top_k": 2,
                        "with_embedding": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BulkSearchResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BulkSearchRequest": {
        "properties": {
          "queries": {
            "items": { "$ref": "#/components/schemas/SearchRequest" },
            "type": "array",
            "title": "Queries",
            "description": "A list of search requests to be processed in bulk."
          }
        },
        "type": "object",
        "required": ["queries"],
        "title": "BulkSearchRequest",
        "description": "Represents a bulk search request for multiple vector similarity searches.\n\nThis class allows users to submit multiple search queries in a single API call,\nwhich can be more efficient than making separate requests for each query.\n\nAttributes:\n    queries (List[SearchRequest]): A list of SearchRequest objects, each representing\n        an individual search query with its own parameters.\n\nExample:\n    >>> bulk_request = BulkSearchRequest(queries=[\n    ...     SearchRequest(query=\"How does AI work?\", top_k=5),\n    ...     SearchRequest(query=\"What is machine learning?\", top_k=3, with_embedding=True)\n    ... ])\n    >>> print(bulk_request)\n    BulkSearchRequest(queries=[SearchRequest(query='How does AI work?', top_k=5, with_embedding=False), SearchRequest(query='What is machine learning?', top_k=3, with_embedding=True)])\n\nNote:\n    The bulk search functionality allows for efficient processing of multiple queries\n    in parallel, which can significantly reduce overall response time compared to\n    sequential individual requests."
      },
      "BulkSearchResponse": {
        "properties": {
          "results": {
            "items": { "$ref": "#/components/schemas/SearchResponse" },
            "type": "array",
            "title": "Results",
            "description": "A list of search responses, each corresponding to a query in the bulk search."
          }
        },
        "type": "object",
        "title": "BulkSearchResponse",
        "description": "Represents the response to a bulk vector similarity search operation.\n\nThis class encapsulates a list of SearchResponse objects, each corresponding\nto a single query in a bulk search request. It provides a structured way to\nreturn results for multiple queries in a single response.\n\nAttributes\n----------\nresults : List[SearchResponse]\n    A list of SearchResponse objects, each containing the results for\n    a single query in the bulk search operation.\n\nMethods\n-------\nfrom_bulk_search_results(bulk_search_results: List[List[Tuple[Point, Optional[Document], float]]]) -> BulkSearchResponse\n    Class method to create a BulkSearchResponse instance from a list of bulk search result tuples.\n\nNotes\n-----\nThe order of SearchResponse objects in the results list corresponds to\nthe order of queries in the original bulk search request.\n\nExamples\n--------\n>>> point1 = Point(point_id=\"1\", document_id=\"doc1\", content_md5=\"abc123\", embedding=[0.1, 0.2, 0.3])\n>>> document1 = Document(document_id=\"doc1\", name=\"Doc 1\", content=\"Content 1\")\n>>> result1 = SearchResult(point=point1, document=document1, relevance_score=0.95)\n>>> response1 = SearchResponse(results=[result1])\n>>> point2 = Point(point_id=\"2\", document_id=\"doc2\", content_md5=\"def456\", embedding=[0.4, 0.5, 0.6])\n>>> document2 = Document(document_id=\"doc2\", name=\"Doc 2\", content=\"Content 2\")\n>>> result2 = SearchResult(point=point2, document=document2, relevance_score=0.85)\n>>> response2 = SearchResponse(results=[result2])\n>>> bulk_response = BulkSearchResponse(results=[response1, response2])\n>>> print(len(bulk_response.results))\n2"
      },
      "Document": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id",
            "description": "Unique identifier for the document."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name or title of the document."
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Full text content of the document."
          },
          "content_md5": {
            "type": "string",
            "title": "Content Md5",
            "description": "MD5 hash of the content for integrity checks."
          },
          "metadata": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Metadata",
            "description": "Additional metadata associated with the document."
          },
          "created_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Created At",
            "description": "Unix timestamp of document creation."
          },
          "updated_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Updated At",
            "description": "Unix timestamp of last document update."
          }
        },
        "type": "object",
        "required": ["document_id", "name", "content", "content_md5"],
        "title": "Document",
        "description": "Represents a document in the system, containing metadata and content information.\n\nThis class encapsulates all the relevant information about a document, including\nits unique identifier, name, content, and various metadata fields. It is designed\nto work in conjunction with the Point class for vector similarity search operations.\n\nAttributes:\n    document_id (Text): A unique identifier for the document.\n    name (Text): The name or title of the document.\n    content (Text): The full text content of the document.\n    content_md5 (Text): An MD5 hash of the content for integrity checks.\n    metadata (Optional[Dict[Text, Any]]): Additional metadata associated with the document.\n    created_at (Optional[int]): Unix timestamp of when the document was created.\n    updated_at (Optional[int]): Unix timestamp of when the document was last updated.\n\nThe Document class is essential for storing and retrieving document information\nin the vector similarity search system. It provides a structured way to manage\ndocument data and metadata, which can be used in conjunction with vector embeddings\nfor advanced search and retrieval operations."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Point": {
        "properties": {
          "point_id": {
            "type": "string",
            "title": "Point Id",
            "description": "Unique identifier for the point in the vector space."
          },
          "document_id": {
            "type": "string",
            "title": "Document Id",
            "description": "Identifier of the associated document."
          },
          "content_md5": {
            "type": "string",
            "title": "Content Md5",
            "description": "MD5 hash of the content for quick comparison and integrity checks."
          },
          "embedding": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Embedding",
            "description": "Vector embedding representation of the point."
          }
        },
        "type": "object",
        "required": ["point_id", "document_id", "content_md5", "embedding"],
        "title": "Point",
        "description": "Represents a point in the vector space, associated with a document.\n\nThis class encapsulates the essential information about a point in the vector space,\nincluding its unique identifier, the document it belongs to, a content hash, and its\nvector embedding.\n\nAttributes:\n    point_id (Text): A unique identifier for the point in the vector space.\n    document_id (Text): The identifier of the document this point is associated with.\n    content_md5 (Text): An MD5 hash of the content, used for quick comparisons and integrity checks.\n    embedding (List[float]): The vector embedding representation of the point in the vector space.\n\nThe Point class is crucial for vector similarity search operations, as it contains\nthe embedding that is used for comparison with query vectors."
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "anyOf": [
              { "type": "string" },
              { "items": { "type": "number" }, "type": "array" }
            ],
            "title": "Query",
            "description": "The search query as text or a pre-computed vector embedding."
          },
          "top_k": {
            "type": "integer",
            "title": "Top K",
            "description": "The maximum number of results to return.",
            "default": 5
          },
          "with_embedding": {
            "type": "boolean",
            "title": "With Embedding",
            "description": "Whether to include the embedding in the result.",
            "default": false
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "SearchRequest",
        "description": "Represents a single search request for vector similarity search.\n\nThis class encapsulates the parameters needed to perform a vector similarity search\nin the DuckDB VSS API. It allows users to specify the query, the number of results\nto return, and whether to include the embedding in the results.\n\nAttributes:\n    query (Union[Text, List[float]]): The search query, which can be either a text string\n        or a pre-computed vector embedding as a list of floats. If a text string is provided,\n        it will be converted to a vector embedding using the configured embedding model.\n    top_k (int): The maximum number of results to return. Defaults to 5.\n    with_embedding (bool): Whether to include the embedding vector in the search results.\n        Defaults to False to reduce response size.\n\nExample:\n    >>> request = SearchRequest(query=\"How does AI work?\", top_k=10, with_embedding=True)\n    >>> print(request)\n    SearchRequest(query='How does AI work?', top_k=10, with_embedding=True)\n\nNote:\n    When `query` is a list of floats, it's assumed to be a pre-computed embedding vector.\n    This can be useful for clients that want to perform their own embedding computation\n    or for testing purposes."
      },
      "SearchResponse": {
        "properties": {
          "results": {
            "items": { "$ref": "#/components/schemas/SearchResult" },
            "type": "array",
            "title": "Results",
            "description": "A list of search results from the vector similarity search."
          }
        },
        "type": "object",
        "title": "SearchResponse",
        "description": "Represents the response to a single vector similarity search query.\n\nThis class encapsulates a list of SearchResult objects, providing a\nstructured way to return multiple matching results for a given query.\n\nAttributes\n----------\nresults : List[SearchResult]\n    A list of SearchResult objects, each representing a matched item\n    from the vector similarity search.\n\nMethods\n-------\nfrom_search_results(search_results: List[Tuple[Point, Optional[Document], float]]) -> SearchResponse\n    Class method to create a SearchResponse instance from a list of search result tuples.\n\nNotes\n-----\nThe results are typically ordered by relevance score in descending order,\nwith the most similar matches appearing first in the list.\n\nExamples\n--------\n>>> point1 = Point(point_id=\"1\", document_id=\"doc1\", content_md5=\"abc123\", embedding=[0.1, 0.2, 0.3])\n>>> document1 = Document(document_id=\"doc1\", name=\"Doc 1\", content=\"Content 1\")\n>>> result1 = SearchResult(point=point1, document=document1, relevance_score=0.95)\n>>> point2 = Point(point_id=\"2\", document_id=\"doc2\", content_md5=\"def456\", embedding=[0.4, 0.5, 0.6])\n>>> document2 = Document(document_id=\"doc2\", name=\"Doc 2\", content=\"Content 2\")\n>>> result2 = SearchResult(point=point2, document=document2, relevance_score=0.85)\n>>> response = SearchResponse(results=[result1, result2])\n>>> print(len(response.results))\n2"
      },
      "SearchResult": {
        "properties": {
          "point": {
            "$ref": "#/components/schemas/Point",
            "description": "The matched point in the vector space."
          },
          "document": {
            "anyOf": [
              { "$ref": "#/components/schemas/Document" },
              { "type": "null" }
            ],
            "description": "The associated document for the matched point, if available."
          },
          "relevance_score": {
            "type": "number",
            "title": "Relevance Score",
            "description": "The similarity score between the query and the matched point.",
            "default": 0.0
          }
        },
        "type": "object",
        "required": ["point"],
        "title": "SearchResult",
        "description": "Represents a single result from a vector similarity search operation.\n\nThis class encapsulates the information returned for each matching item\nin a vector similarity search, including the matched point, its associated\ndocument (if any), and the relevance score indicating how closely it matches\nthe query.\n\nAttributes\n----------\npoint : Point\n    The matched point in the vector space, containing embedding and metadata.\ndocument : Optional[Document]\n    The associated document for the matched point, if available.\nrelevance_score : float\n    A score indicating the similarity between the query and the matched point,\n    typically ranging from 0 to 1, where 1 indicates a perfect match.\n\nMethods\n-------\nfrom_search_result(search_result: Tuple[Point, Optional[Document], float]) -> SearchResult\n    Class method to create a SearchResult instance from a tuple of search results.\n\nNotes\n-----\nThe relevance score is typically calculated using cosine similarity between\nthe query vector and the point's embedding vector.\n\nExamples\n--------\n>>> point = Point(point_id=\"1\", document_id=\"doc1\", content_md5=\"abc123\", embedding=[0.1, 0.2, 0.3])\n>>> document = Document(document_id=\"doc1\", name=\"Example Doc\", content=\"Sample content\")\n>>> result = SearchResult(point=point, document=document, relevance_score=0.95)\n>>> print(result.relevance_score)\n0.95"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
